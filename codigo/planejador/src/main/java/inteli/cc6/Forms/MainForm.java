package inteli.cc6.Forms;

import inteli.cc6.Algorithms.ExecutionPipeline.SolverPipeline;
import inteli.cc6.Algorithms.PatternGenerators.Generators.FireflyIPatternGenerator;
import inteli.cc6.Algorithms.PatternGenerators.Generators.GAIPatternGenerator;
import inteli.cc6.Algorithms.Solvers.Solver.MIPISolver;
import inteli.cc6.Algorithms.Solvers.Solver.SimplexISolver;
import inteli.cc6.InputReader.InputReader;
import inteli.cc6.InputReader.Readers.Excel;
import inteli.cc6.Models.Result;
import org.apache.commons.math3.util.Pair;
import org.icepdf.ri.common.ComponentKeyBinding;
import org.icepdf.ri.common.SwingController;
import org.icepdf.ri.common.SwingViewBuilder;
import processing.core.PApplet;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this lic/var/folders/yl/rlm3msk52gz7gbdmfhx2k7vm0000gn/T/TemporaryItems/NSIRD_screencaptureui_WY8phr/Captura de Tela 2023-05-25 às 10.03.06.pngense
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 * @author thomasbrand
 */
public class MainForm extends javax.swing.JFrame {

    private InputReader _inputReader;
    private Result _currentResult;

    // Singleton instance
    Singleton singleton = Singleton.getInstance();
    HistorySingleton historySingleton = HistorySingleton.getInstance();

    /**
     * Creates new form MainForm
     */
    public MainForm() {
        initComponents();
        if (_inputReader == null) {
            runModel.setEnabled(false);
            patternsTable.setEnabled(false);
            settingsTable.setEnabled(false);
            clientWalletTable.setEnabled(false);
            configsBtn.setEnabled(false);
            historyBtn.setEnabled(false);

            // disable table selection
            patternsTable.setRowSelectionAllowed(false);
            settingsTable.setRowSelectionAllowed(false);
            clientWalletTable.setRowSelectionAllowed(false);

            // disable drawingView btn
            viewDrawingBtn.setEnabled(false);
            viewDrawingBtn.setVisible(false);
        }
        setLocationRelativeTo(null);
        setExtendedState(JFrame.MAXIMIZED_BOTH);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        historyDialog = new javax.swing.JDialog();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        historyDialogPatternScrollPane = new javax.swing.JScrollPane();
        historyDialogPatternTable = new javax.swing.JTable();
        jPanel4 = new javax.swing.JPanel();
        historyDialogComparePatterns = new javax.swing.JButton();
        historyDialogLoadPattern = new javax.swing.JButton();
        bestResultsDialog = new javax.swing.JDialog();
        jPanel3 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        bestResultsPane = new javax.swing.JScrollPane();
        bestResultsTable = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        loadBestResult = new javax.swing.JButton();
        title = new java.awt.Label();
        topBorder = new javax.swing.JPanel();
        leftSection = new javax.swing.JPanel();
        confirmBtn = new javax.swing.JButton();
        runModel = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        clientWalletTable = new javax.swing.JTable();
        label1 = new java.awt.Label();
        jScrollPane3 = new javax.swing.JScrollPane();
        settingsTable = new javax.swing.JTable();
        label3 = new java.awt.Label();
        rightSection = new javax.swing.JPanel();
        resultsPatternScrollPane = new javax.swing.JScrollPane();
        patternsTable = new javax.swing.JTable();
        wasteTitle = new java.awt.Label();
        resultTitle = new java.awt.Label();
        totalWaste = new java.awt.Label();
        viewDrawingBtn = new javax.swing.JButton();
        configsBtn = new javax.swing.JButton();
        historyBtn = new javax.swing.JButton();

        historyDialog.setMinimumSize(new java.awt.Dimension(651, 500));

        jPanel1.setBackground(new java.awt.Color(36, 36, 36));
        jPanel1.setToolTipText("");

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("ID SOLUÇÃO");

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("N° DE PADRÕES");

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("WASTE TOTAL");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addComponent(jLabel1)
                .addGap(99, 99, 99)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 142, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(101, 101, 101))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        historyDialogPatternScrollPane.setBackground(new java.awt.Color(255, 255, 255));

        historyDialogPatternTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        historyDialogPatternScrollPane.setViewportView(historyDialogPatternTable);

        jPanel4.setBackground(new java.awt.Color(184, 184, 184));

        historyDialogComparePatterns.setBackground(new java.awt.Color(255, 173, 20));
        historyDialogComparePatterns.setText("COMPARAR PADRÕES");
        historyDialogComparePatterns.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                historyDialogComparePatternsMouseClicked(evt);
            }
        });
        historyDialogComparePatterns.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historyDialogComparePatternsActionPerformed(evt);
            }
        });

        historyDialogLoadPattern.setBackground(new java.awt.Color(20, 255, 251));
        historyDialogLoadPattern.setText("CARREGAR PADRÃO");
        historyDialogLoadPattern.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                historyDialogLoadPatternMouseClicked(evt);
            }
        });
        historyDialogLoadPattern.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historyDialogLoadPatternActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(99, 99, 99)
                .addComponent(historyDialogLoadPattern)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(historyDialogComparePatterns)
                .addGap(98, 98, 98))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(historyDialogComparePatterns)
                    .addComponent(historyDialogLoadPattern))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout historyDialogLayout = new javax.swing.GroupLayout(historyDialog.getContentPane());
        historyDialog.getContentPane().setLayout(historyDialogLayout);
        historyDialogLayout.setHorizontalGroup(
            historyDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(historyDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(historyDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(historyDialogPatternScrollPane)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        historyDialogLayout.setVerticalGroup(
            historyDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, historyDialogLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(historyDialogPatternScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        bestResultsDialog.setMinimumSize(new java.awt.Dimension(700, 450));

        jPanel3.setBackground(new java.awt.Color(0, 153, 0));
        jPanel3.setToolTipText("");

        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("MELHORES ENCONTRADOS");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addGap(224, 224, 224))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        bestResultsPane.setBackground(new java.awt.Color(255, 255, 255));

        bestResultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        bestResultsPane.setViewportView(bestResultsTable);

        jPanel7.setBackground(new java.awt.Color(184, 184, 184));

        loadBestResult.setBackground(new java.awt.Color(20, 255, 251));
        loadBestResult.setText("CARREGAR PADRÃO");
        loadBestResult.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loadBestResultMouseClicked(evt);
            }
        });
        loadBestResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadBestResultActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(228, 228, 228)
                .addComponent(loadBestResult)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(loadBestResult)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout bestResultsDialogLayout = new javax.swing.GroupLayout(bestResultsDialog.getContentPane());
        bestResultsDialog.getContentPane().setLayout(bestResultsDialogLayout);
        bestResultsDialogLayout.setHorizontalGroup(
            bestResultsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(bestResultsDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(bestResultsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(bestResultsPane, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        bestResultsDialogLayout.setVerticalGroup(
            bestResultsDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bestResultsDialogLayout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bestResultsPane, javax.swing.GroupLayout.DEFAULT_SIZE, 233, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(228, 228, 228));

        title.setFont(new java.awt.Font("Noto Sans", 1, 24)); // NOI18N
        title.setText("BLADE RUNNERS");

        topBorder.setBackground(new java.awt.Color(87, 86, 86));

        javax.swing.GroupLayout topBorderLayout = new javax.swing.GroupLayout(topBorder);
        topBorder.setLayout(topBorderLayout);
        topBorderLayout.setHorizontalGroup(
            topBorderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        topBorderLayout.setVerticalGroup(
            topBorderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 18, Short.MAX_VALUE)
        );

        leftSection.setBackground(new java.awt.Color(228, 228, 228));
        leftSection.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        confirmBtn.setBackground(new java.awt.Color(51, 102, 255));
        confirmBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        confirmBtn.setForeground(new java.awt.Color(255, 255, 255));
        confirmBtn.setText("CARREGAR ARQUIVO");
        confirmBtn.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        confirmBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmBtnActionPerformed(evt);
            }
        });

        runModel.setBackground(new java.awt.Color(51, 153, 0));
        runModel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        runModel.setForeground(new java.awt.Color(255, 255, 255));
        runModel.setText("EXECUTAR MODELO");
        runModel.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        runModel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runModelActionPerformed(evt);
            }
        });

        clientWalletTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(clientWalletTable);

        label1.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        label1.setText("Demandas");

        settingsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(settingsTable);

        label3.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        label3.setText("Configurações da máquina");

        javax.swing.GroupLayout leftSectionLayout = new javax.swing.GroupLayout(leftSection);
        leftSection.setLayout(leftSectionLayout);
        leftSectionLayout.setHorizontalGroup(
            leftSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftSectionLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(leftSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(leftSectionLayout.createSequentialGroup()
                        .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, leftSectionLayout.createSequentialGroup()
                        .addGroup(leftSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 464, Short.MAX_VALUE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(leftSectionLayout.createSequentialGroup()
                                .addComponent(confirmBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 144, Short.MAX_VALUE)
                                .addComponent(runModel, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(35, 35, 35))))
            .addGroup(leftSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(leftSectionLayout.createSequentialGroup()
                    .addGap(46, 46, 46)
                    .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(215, Short.MAX_VALUE)))
        );
        leftSectionLayout.setVerticalGroup(
            leftSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leftSectionLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(leftSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(runModel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(47, 47, 47)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 418, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(leftSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(leftSectionLayout.createSequentialGroup()
                    .addGap(80, 80, 80)
                    .addComponent(label3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(375, Short.MAX_VALUE)))
        );

        rightSection.setBackground(new java.awt.Color(228, 228, 228));
        rightSection.setForeground(new java.awt.Color(255, 255, 255));

        patternsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        patternsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                patternsTableMouseClicked(evt);
            }
        });
        resultsPatternScrollPane.setViewportView(patternsTable);

        wasteTitle.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        wasteTitle.setForeground(new java.awt.Color(51, 51, 51));
        wasteTitle.setText("Total waste:");

        resultTitle.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        resultTitle.setForeground(new java.awt.Color(51, 51, 51));
        resultTitle.setText("Resultados:");

        totalWaste.setFont(new java.awt.Font("Verdana", 1, 12)); // NOI18N
        totalWaste.setForeground(new java.awt.Color(51, 51, 51));
        totalWaste.setText("n/a");

        viewDrawingBtn.setBackground(new java.awt.Color(0, 102, 0));
        viewDrawingBtn.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        viewDrawingBtn.setForeground(new java.awt.Color(255, 255, 255));
        viewDrawingBtn.setText("VISUALIZAR BOBINAS");
        viewDrawingBtn.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        viewDrawingBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewDrawingBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout rightSectionLayout = new javax.swing.GroupLayout(rightSection);
        rightSection.setLayout(rightSectionLayout);
        rightSectionLayout.setHorizontalGroup(
            rightSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightSectionLayout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(rightSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(resultsPatternScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1026, Short.MAX_VALUE)
                    .addGroup(rightSectionLayout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addGroup(rightSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(resultTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(rightSectionLayout.createSequentialGroup()
                                .addComponent(wasteTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(totalWaste, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(viewDrawingBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        rightSectionLayout.setVerticalGroup(
            rightSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rightSectionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rightSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(rightSectionLayout.createSequentialGroup()
                        .addComponent(resultTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(rightSectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(wasteTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(totalWaste, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(viewDrawingBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addComponent(resultsPatternScrollPane)
                .addContainerGap())
        );

        configsBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/src/main/assets/icons/gearIcon.png")));
        configsBtn.setToolTipText("");
        configsBtn.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        configsBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        configsBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                configsBtnActionPerformed(evt);
            }
        });

        historyBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/src/main/assets/icons/historyIcon24.png")));
        historyBtn.setToolTipText("");
        historyBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        historyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                historyBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(topBorder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(leftSection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(21, 21, 21)
                .addComponent(rightSection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(historyBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(configsBtn)
                .addGap(41, 41, 41))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(title, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(configsBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(historyBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(topBorder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(leftSection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rightSection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void viewDrawingBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewDrawingBtnActionPerformed
        // get the current datetime to name the file
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyy-MM-dd-HH-mm-ss");
        LocalDateTime now = LocalDateTime.now();
        String filename = dtf.format(now) + "-bobina.pdf";

        Path source = new File(getClass()
                .getResource("/src/main/assets")
                .getFile()).toPath();

        String filePath =  source.toAbsolutePath() + "/pdf/" + filename;

        ArrayList<Integer> uniqueLengths = new ArrayList<>(_inputReader.getUniqueCoilLengthsAndAmounts().keySet());
        int maxLength = _inputReader.getSetupSpecs().get("Larg Max");

        BobinaPlotter bp = new BobinaPlotter(historySingleton.getCurrentResult().getPatterns(), uniqueLengths, maxLength, filePath);

        String[] sketchArgs = {"BobinaPlotter"};
        PApplet.runSketch(sketchArgs, bp);

        // waits for 2 seconds
        try {
            Thread.sleep(1000);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        // read filename with input stream from get resources
        File file = new File(filePath);
        InputStream inputStream = null;
        try {
            inputStream = new FileInputStream(file);
        } catch (FileNotFoundException e) {
            throw new RuntimeException(e);
        }

        // build a controller
        SwingController controller = new SwingController();
        // Build a SwingViewFactory configured with the controller
        SwingViewBuilder factory = new SwingViewBuilder(controller);

        // Use the factory to build a JPanel that is pre-configured
        //with a complete, active Viewer UI.
        JPanel viewerComponentPanel = factory.buildViewerPanel();

        // add copy keyboard command
        ComponentKeyBinding.install(controller, viewerComponentPanel);

        // add interactive mouse link annotation support via callback
        controller.getDocumentViewController().setAnnotationCallback(
                new org.icepdf.ri.common.MyAnnotationCallback(
                        controller.getDocumentViewController()));

        // Create a JFrame to display the panel in
        JFrame window = new JFrame("Using the Viewer Component");

        window.getContentPane().add(viewerComponentPanel);

        window.addWindowListener(controller);
        window.pack();
        window.setVisible(true);

        // Open a PDF document to view
        controller.openDocument(inputStream, filePath, "");
    }//GEN-LAST:event_viewDrawingBtnActionPerformed


    private void loadBestResultMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_loadBestResultMouseClicked
        // get the current selected row
        try {
            int row = bestResultsTable.getSelectedRow();

            String resultId = bestResultsTable.getModel().getValueAt(row, 0).toString();
            Result result = historySingleton.getResultById(resultId);
            historySingleton.setCurrentResult(result);
            loadResultIntoTable(result, patternsTable);
            bestResultsDialog.setVisible(false);
            historyDialog.setVisible(false);

            JOptionPane.showMessageDialog(null, "Padrão carregado com sucesso!", "Sucesso!", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Não foi possível carregar o padrão selecionado.\nErro: " + e.getMessage(), "Erro!", JOptionPane.ERROR_MESSAGE);
        }

    }// GEN-LAST:event_loadBestResultMouseClicked

    private void historyDialogLoadPatternMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_historyDialogLoadPatternMouseClicked
        try {
            // get the current selected row
            int row = historyDialogPatternTable.getSelectedRow();

            String resultId = historyDialogPatternTable.getModel().getValueAt(row, 0).toString();
            Result result = historySingleton.getResultById(resultId);
            historySingleton.setCurrentResult(result);
            loadResultIntoTable(result, patternsTable);
            historyDialog.setVisible(false);

            JOptionPane.showMessageDialog(null, "Padrão carregado com sucesso!", "Sucesso!", JOptionPane.INFORMATION_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Não foi possível carregar o padrão selecionado.\nErro: " + e.getMessage(), "Erro!", JOptionPane.ERROR_MESSAGE);
        }

    }// GEN-LAST:event_historyDialogLoadPatternMouseClicked

    private void loadResultIntoTable(Result result, JTable targetTable) {
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Pattern");
        model.addColumn("Used Ammount");

        ArrayList<Pair<Double, ArrayList<Integer>>> currentPatterns = result.getPatterns();
        for (int i = 0; i < currentPatterns.size(); i++) {
            model.addRow(new Object[]{currentPatterns.get(i).getSecond(),
                    currentPatterns.get(i).getFirst()});
        }
        targetTable.setModel(model);
        double wasted = result.getResultWaste();
        totalWaste.setText(String.valueOf(wasted));
        historySingleton.setCurrentResult(result);

        viewDrawingBtn.setEnabled(true);
        viewDrawingBtn.setVisible(true);

    }

    private void loadBestResultActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_loadBestResultActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_loadBestResultActionPerformed

    private void historyDialogComparePatternsMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_historyDialogComparePatternsMouseClicked

        try {
            Result[] results = historySingleton.getHistory().toArray(new Result[0]);
            Result lastResult = results[results.length - 1];

            Result bestWasteResult = historySingleton.compareResultByWaste(lastResult);
            Result bestPatternSizeResult = historySingleton.compareResultByPatterns(lastResult);

            // create a table model
            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("Result ID");
            model.addColumn("Pattern Size");
            model.addColumn("Total Waste");
            // add rows to the table model

            model.addRow(new Object[]{bestWasteResult.getResultId(), bestWasteResult.getPatternsSize(),
                    bestWasteResult.getResultWaste()}); // add checkbox value

            model.addRow(new Object[]{bestPatternSizeResult.getResultId(), bestPatternSizeResult.getPatternsSize(),
                    bestPatternSizeResult.getResultWaste()}); // add checkbox value

            bestResultsTable.setModel(model);

            bestResultsDialog.setVisible(true);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Não foi possível comparar os resultados.\nErro: " + e.getMessage(), "Erro!", JOptionPane.ERROR_MESSAGE);
        }

    }// GEN-LAST:event_historyDialogComparePatternsMouseClicked

    // Turn settings screen visible
    private void configsBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_configsBtnActionPerformed
        Settings newScreen = new Settings();
        newScreen.setVisible(true);
        newScreen.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        // Get the amount of populations to generate in the GeneticalOptimizer
        // population = Integer.parseInt(JOptionPane.showInputDialog("Digite a
        // quantidade de padrões base a serem gerados:"));
    }// GEN-LAST:event_configsBtnActionPerformed

    private void runModelActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_runModelActionPerformed
        viewDrawingBtn.setEnabled(false);
        viewDrawingBtn.setVisible(false);

        JDialog dialog = new JDialog();
        JProgressBar progressBar = new JProgressBar();
        dialog.add(progressBar);
        dialog.pack();
        dialog.setLocationRelativeTo(null);
        dialog.setVisible(true);

        // Use a SwingWorker to perform the task in the background
        SwingWorker<Void, Integer> worker = new SwingWorker<Void, Integer>() {
            @Override
            protected Void doInBackground() throws Exception {
                GAIPatternGenerator geneticPatternGenerator = new GAIPatternGenerator(_inputReader, singleton.getPopulationSize());
                FireflyIPatternGenerator fireflyPatternGenerator = new FireflyIPatternGenerator(_inputReader, 50, 120);

                SolverPipeline pipeline = new SolverPipeline(_inputReader, geneticPatternGenerator);
                pipeline.addSolver(new SimplexISolver());
                pipeline.addSolver(new MIPISolver());
                pipeline.setProgressBar(progressBar);
                Result result = pipeline.run(singleton.getPopulation());
                _currentResult = result;
                historySingleton.addResult(result);
                loadResultIntoTable(result, patternsTable);
                return null;
            }

            @Override
            protected void done() {
                try {
                    get();
                    JOptionPane.showMessageDialog(null, "Otimização concluída com sucesso!", "Sucesso",
                            JOptionPane.INFORMATION_MESSAGE);
                } catch (Exception e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Ocorreu um erro ao executar a otimização!\nErro: " + e.getMessage(), "Erro",
                            JOptionPane.ERROR_MESSAGE);
                } finally {
                    dialog.dispose();
                }
            }
        };

        worker.execute();
    }// GEN-LAST:event_runModelActionPerformed

    private void confirmBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_confirmBtnActionPerformed
        // open file chooser filter only EXCEL files

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileFilter(new javax.swing.filechooser.FileFilter() {
            public boolean accept(java.io.File f) {
                if (f.isDirectory()) {
                    return true;
                } else {
                    return f.getName().toLowerCase().endsWith(".xlsx");
                }
            }

            public String getDescription() {
                return "Excel Files";
            }
        });
        int returnValue = fileChooser.showOpenDialog(null);
        if (returnValue == JFileChooser.APPROVE_OPTION) {
            // filenameLabel.setText(fileChooser.getSelectedFile().getName());
        }
        Excel excelReader = new inteli.cc6.InputReader.Readers.Excel(
                fileChooser.getSelectedFile().getAbsolutePath());

        // asks the user which sheet to read
        int sheetNumber = Integer
                .parseInt(JOptionPane.showInputDialog("Digite o número da planilha que deseja ler:"));
        excelReader.readSheet(sheetNumber);

        _inputReader = excelReader;

        // show success message
        JOptionPane.showMessageDialog(null, "Arquivo lido com sucesso!", "Sucesso",
                JOptionPane.INFORMATION_MESSAGE);

        ArrayList<Integer> lengthList = new ArrayList<Integer>();
        lengthList = _inputReader.getLengthList();
        HashMap<String, Integer> machineSpecs = _inputReader.getSetupSpecs();

        // create a table model
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Tamanho");
        model.addColumn("Quantidade");

        // Create specs model
        DefaultTableModel specsModel = new DefaultTableModel();

        ArrayList<String> keys = new ArrayList<String>();
        for (String key : machineSpecs.keySet()) {
            specsModel.addColumn(key);
            keys.add(key);
        }

        // add rows to the table model
        for (int i = 0; i < lengthList.size(); i++) {
            model.addRow(new Object[]{lengthList.get(i), _inputReader.getCoilList().get(i)});
        }

        // add rows to the specs model

        Object[] row = new Object[keys.size()];
        for (int i = 0; i < keys.size(); i++) {
            row[i] = machineSpecs.get(keys.get(i));
        }
        specsModel.addRow(row);

        // set the table model to the table
        clientWalletTable.setModel(model);
        clientWalletTable.getTableHeader().setReorderingAllowed(false);
        clientWalletTable.getTableHeader().setFont(new Font("Sergoe UI", Font.BOLD, 12));

        // set the specs model to the table
        settingsTable.setModel(specsModel);
        settingsTable.getTableHeader().setReorderingAllowed(false);
        settingsTable.getTableHeader().setFont(new Font("Sergoe UI", Font.BOLD, 12));

        // set the headers for the patterns table
        patternsTable.getTableHeader().setReorderingAllowed(false);
        patternsTable.getTableHeader().setFont(new Font("Sergoe UI", Font.BOLD, 12));

        runModel.setEnabled(true);
        patternsTable.setEnabled(true);
        settingsTable.setEnabled(true);
        clientWalletTable.setEnabled(true);
        configsBtn.setEnabled(true);
        historyBtn.setEnabled(true);

        // disable table selection
        patternsTable.setRowSelectionAllowed(true);
        settingsTable.setRowSelectionAllowed(true);
        clientWalletTable.setRowSelectionAllowed(true);


    }// GEN-LAST:event_confirmBtnActionPerformed

    private void patternsTableMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_patternsTableMouseClicked
        int row = patternsTable.rowAtPoint(evt.getPoint());
        Result currentResult = historySingleton.getCurrentResult();
        ArrayList<Pair<Double, ArrayList<Integer>>> currentPatterns = currentResult.getPatterns();
        Pair<Double, ArrayList<Integer>> currentPattern = currentPatterns.get(row);
        ArrayList<Integer> convertedPattern = new ArrayList<>();

        ArrayList<Integer> _uniqueLengthList = new ArrayList<>(
                _inputReader.getUniqueCoilLengthsAndAmounts().keySet());

        Double count = currentPattern.getFirst();
        for (int i = 0; i < currentPattern.getSecond().size(); i++) {
            for (int j = currentPattern.getSecond().get(i); j > 0; j--) {
                convertedPattern.add(_uniqueLengthList.get(i));
            }
        }

    }// GEN-LAST:event_patternsTableMouseClicked

    private void historyDialogComparePatternsActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_historyDialogComparePatternsActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_historyDialogComparePatternsActionPerformed

    private void historyDialogLoadPatternActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_historyDialogLoadPatternActionPerformed
        // TODO add your handling code here
    }// GEN-LAST:event_historyDialogLoadPatternActionPerformed

    private void historyBtnActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_historyBtnActionPerformed
        historyDialog.setVisible(true);

        // get the result patterns
        Result[] results = historySingleton.getHistory().toArray(new Result[0]);

        // create a table model
        DefaultTableModel model = new DefaultTableModel();
        model.addColumn("Result ID");
        model.addColumn("Pattern Size");
        model.addColumn("Total Waste");

        // add rows to the table model
        for (Result resultPattern : results) {
            model.addRow(new Object[]{resultPattern.getResultId(), resultPattern.getPatternsSize(),
                    resultPattern.getResultWaste()}); // add checkbox value
        }

        // set the table model to the table
        historyDialogPatternTable.setModel(model);
    }// GEN-LAST:event_historyBtnActionPerformed

    private void historyBtnMouseClicked(ActionEvent evt) {// GEN-FIRST:event_historyBtnMouseClicked


    }// GEN-LAST:event_historyBtnMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
                    .getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog bestResultsDialog;
    private javax.swing.JScrollPane bestResultsPane;
    private javax.swing.JTable bestResultsTable;
    private javax.swing.JTable clientWalletTable;
    private javax.swing.JButton configsBtn;
    private javax.swing.JButton confirmBtn;
    private javax.swing.JButton historyBtn;
    private javax.swing.JDialog historyDialog;
    private javax.swing.JButton historyDialogComparePatterns;
    private javax.swing.JButton historyDialogLoadPattern;
    private javax.swing.JScrollPane historyDialogPatternScrollPane;
    private javax.swing.JTable historyDialogPatternTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private java.awt.Label label1;
    private java.awt.Label label3;
    private javax.swing.JPanel leftSection;
    private javax.swing.JButton loadBestResult;
    private javax.swing.JTable patternsTable;
    private java.awt.Label resultTitle;
    private javax.swing.JScrollPane resultsPatternScrollPane;
    private javax.swing.JPanel rightSection;
    private javax.swing.JButton runModel;
    private javax.swing.JTable settingsTable;
    private java.awt.Label title;
    private javax.swing.JPanel topBorder;
    private java.awt.Label totalWaste;
    private javax.swing.JButton viewDrawingBtn;
    private java.awt.Label wasteTitle;
    // End of variables declaration//GEN-END:variables
}
